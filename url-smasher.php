<?php
/*
Plugin Name: The URL Smasher
Plugin URI: http://cellarweb.com/wordpress-plugins/
Description: Automatically shortens URLS in posts/pages/comments, using the bit.ly shortener API
Text Domain:
Author: Rick Hellewell / CellarWeb.com
Tested up to: 6.3
Version: 3.10
PUP Version: 7.2
Author URI: http://CellarWeb.com
License: GPLv2 or later
 */

/*
Copyright (c) 2015 by Rick Hellewell and CellarWeb.com
All Rights Reserved

email: rhellewell@gmail.com

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License, version 2, as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

 */
// ----------------------------------------------------------------
// ----------------------------------------------------------------
define("URLSMASH_VERSION", "3.10 (10 JUn 2022)");
$url_smasher_options = get_option('url_smasher_options');
define("URL_SMASHER_OPTIONS", $url_smasher_options);
/*echo "40<br>";
urlsmasher_print_array(URL_SMASHER_OPTIONS);*/

$plugin = plugin_basename(__FILE__);
add_filter("plugin_action_links_$plugin", 'urlsmasher_settings_link');
// Add settings link on plugin page
function urlsmasher_settings_link($links) {
	$settings_link = '<a href="options-general.php?page=URL_Smasher_settings" title="URL Smasher">URL Smasher Settings</a>';
	array_unshift($links, $settings_link);
	return $links;
}

/**
 * Generated by the WordPress Option Page generator
 * at https://jeremyhixon.com/tool/wordpress-option-page-generator/
 */

class UrlSmasherOptions {
	private $url_smasher_options;

	public function __construct() {
		add_action('admin_menu', array($this, 'url_smasher_options_add_plugin_page'));
		add_action('admin_init', array($this, 'url_smasher_options_page_init'));
	}

	public function url_smasher_options_add_plugin_page() {
		add_options_page(
			'URL Smasher Options', // page_title
			'URL Smasher', // menu_title
			'manage_options', // capability
			'url-smasher-options', // menu_slug
			array($this, 'url_smasher_options_create_admin_page') // function
		);
	}

	public function url_smasher_options_create_admin_page() {
		$this->url_smasher_options = get_option('url_smasher_options');?>
<div>
    <div class="urlsmasher_options">
            <?php urlsmasher_info_top();
		// note: do not do settings_error, as that will cause duplicate 'option saved' message with current WP versions
		?>

            <form method="post" action="options.php">
                <?php
settings_fields('url_smasher_options_group'); // should be the option group name
		do_settings_sections('url_smasher_options_admin');
		submit_button();
		?>
            </form>
        <?php
$url_smasher_access_token = (!empty($this->options['url_smasher_bitly_token'])) ? URL_SMASHER_OPTIONS['url_smasher_bitly_token'] : "";
		if (!empty(URL_SMASHER_OPTIONS['url_smasher_bitly_token'])) {
			urlsmasher_show_test_button(URL_SMASHER_OPTIONS['url_smasher_bitly_token']);
		}
		urlsmasher_footer(); // display bottom info stuff
		?>
</div>
    </div>

       <div class='urlsmasher_sidebar'>
        <?php urlsmasher_sidebar();?>
    </div>
    <?php }

	public function url_smasher_options_page_init() {
		wp_register_style('urlsmash_namespace', plugins_url('/css/urlsmasher_settings.css', __FILE__), array(), URLSMASH_VERSION);
		wp_enqueue_style('urlsmash_namespace'); // gets the above css file in the proper spot

		register_setting(
			'url_smasher_options_group', // option_group
			'url_smasher_options', // option_name
			array($this, 'url_smasher_options_sanitize') // sanitize_callback
		);

		add_settings_section(
			'url_smasher_options_setting_section', // id
			'Settings', // title
			array($this, 'url_smasher_options_section_info'), // callback
			'url_smasher_options_admin' // page
		);

		add_settings_field(
			'url_smasher_bitly_token', // id
			'Your Bit.ly Access Token', // title
			array($this, 'url_smasher_bitly_token_callback'), // callback
			'url_smasher_options_admin', // page
			'url_smasher_options_setting_section' // section
		);

		add_settings_field(
			'url_smasher_enable_comment', // id
			'Enable for Comments', // title
			array($this, 'url_smasher_enable_comment_callback'), // callback
			'url_smasher_options_admin', // page
			'url_smasher_options_setting_section' // section
		);

		add_settings_field(
			'url_smasher_enable_content', // id
			'Enable for Page/Post Content', // title
			array($this, 'url_smasher_enable_content_callback'), // callback
			'url_smasher_options_admin', // page
			'url_smasher_options_setting_section' // section
		);
	}

	// should this set default value with () - ? - :
	public function url_smasher_options_sanitize($input) {
		//urlsmasher_print_array($input);
		$sanitary_values = array();
		if (isset($input['url_smasher_bitly_token'])) {
			$sanitary_values['url_smasher_bitly_token'] = sanitize_text_field($input['url_smasher_bitly_token']);
		}

		if (isset($input['url_smasher_enable_comment'])) {
			$sanitary_values['url_smasher_enable_comment'] = $input['url_smasher_enable_comment'];
		}

		if (isset($input['url_smasher_enable_content'])) {
			$sanitary_values['url_smasher_enable_content'] = $input['url_smasher_enable_content'];
		}
		return $sanitary_values;
	}

	public function url_smasher_options_section_info() { // not used, info_top instead
	}

	// note: the name needs to be the option[option_name] , or the values won't save. See my question https://wordpress.stackexchange.com/q/306654/29416
	public function url_smasher_bitly_token_callback() {
		printf(
			'<table><tr><td><input type="text" id="url_smasher_bitly_token" name="url_smasher_options[url_smasher_bitly_token]" size="50"  maxlength="50" value="%s" ></td><td valign="top">Enter Your Bit.ly Generic Access Token. <br><em>Make sure it is correct; test it after you Save Changes with the "Validate Bit.ly Generic Access Token" button below.</em><br>Invalid token codes will not shorten the URL.<br> See instructions above to get your Access Token.</td></tr></table>',
			isset($this->url_smasher_options['url_smasher_bitly_token']) ? esc_attr($this->url_smasher_options['url_smasher_bitly_token']) : ''
		);
	}

/*
public function url_smasher_enable_content_0_callback() {
printf(
'<input type="checkbox" name="just_testing_option_name[url_smasher_enable_content]" id="url_smasher_enable_content_0" value="url_smasher_enable_content" %s>',
( isset( $this->just_testing_options['url_smasher_enable_content'] ) && $this->just_testing_options['url_smasher_enable_content'] === 'url_smasher_enable_content' ) ? 'checked' : ''
);
}
 */
	public function url_smasher_enable_content_callback() {
		echo "<table><tr><td>";
		printf(
			'<input type="checkbox" name="url_smasher_options[url_smasher_enable_content]" id="url_smasher_enable_content" value="url_smasher_enable_content" %s>',
			(isset($this->url_smasher_options['url_smasher_enable_content']) && $this->url_smasher_options['url_smasher_enable_content'] === 'url_smasher_enable_content') ? 'checked' : ''
		);
		echo "</td><td valign='top'>Check if you want to smash URLs in <b>page/post</b> content. URLs are smashed only on page/post save/update.</td></tr></table>";
	}

	public function url_smasher_enable_comment_callback() {
		echo "<table><tr><td>";
		printf(
			'<input type="checkbox" name="url_smasher_options[url_smasher_enable_comment]" id="url_smasher_enable_comment" value="url_smasher_enable_comment" %s>',
			(isset($this->url_smasher_options['url_smasher_enable_comment']) && $this->url_smasher_options['url_smasher_enable_comment'] === 'url_smasher_enable_comment') ? 'checked' : ''
		);
		echo "</td><td valign='top'>Check if you want to smash URLs in <b>comments</b> content. URLs are smashed only on comment save/update.</td></tr></table>";
	}
}
if (is_admin()) {
	$url_smasher_options = new UrlSmasherOptions();
}

/*
 * Retrieve this value with:
 * $url_smasher_options = get_option( 'url_smasher_options' ); // Array of All Options
 * $url_smasher_bitly_token = $url_smasher_options['url_smasher_bitly_token']; // url_smasher_bitly_token
 * $url_smasher_enable_comment = $url_smasher_options['url_smasher_enable_comment']; // url_smasher_enable_comment
 * $url_smasher_enable_content = $url_smasher_options['url_smasher_enable_content']; // url_smasher_enable_content
 */

// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// supporting functions
// ----------------------------------------------------------------------------
//  display the top info part of the page
// ----------------------------------------------------------------------------
function urlsmasher_info_top() {
	$image2 = plugin_dir_url(__FILE__) . '/assets/banner-772x250.png';
	?>
<div class="wrap">
    <h2></h2>
<div align='center' class = 'urlsmasher_header'>
     <img src="<?php echo plugin_dir_url(__FILE__); ?>assets/banner-1000x200.jpg" width="100%"  alt="" class='urlsmasher_shadow'>
</div>
        <p align='center'> Version <?php echo URLSMASH_VERSION; ?></p>
    <hr />

    <!--<h2>URL Smasher Settings</h2>-->
    <p>Enabling <strong>URL Smasher</strong> will automatically (without any effort on your part) convert all valid URLs to bit.ly short links. This will happen for pages, posts, and comments (depending on your settings below) as the item is saved/published. Because you don't have to do anything special to smash a URL, this plugin is great for sites with lots of authors or commenters.</p>
    <p>URLs are smashed only when posts/pages/comments are saved/updated/submitted. Any prior content does not get URL Smashed unless you re-save that content.</p>
    <p>All you need is a valid Bit.ly Generic Access Token; use these instructions. <i>Make sure you have a version 4 token; version 3 tokens do not work.</i> Use the yellow test button below after you save options to check for a valid token.</p>
<ul style='list-style: inside;padding-left: 3%;line-height: normal;'>
    <li>Create a Bit.ly account at <a href="https://bitly.com/a/sign_up" target="_blank">Bit.ly</a>, or log in with your current account.</li>
    <li>Go to<a href=" https://app.bitly.com/settings/api/" target="_blank"> https://app.bitly.com/settings/api/</a> . </li>
    <li>Click "Generate Token" button. </li>
    <li>Enter your Bit.ly account password. That will display your Access Token. (You may have to click the "Generate Token" button again after password entry.)</li>
    <li>That Access Token goes into the Access Token field on this settings page.</li>
</ul>
    <p>If there is a problem with the <strong>URL Smasher</strong> process, URLs will not be changed. Once you solve the problem with your Bit.ly account Access Token (which is almost always the cause of URL Smashing not working), the next Save/Update of your content will smash the URLs.</p>
    <p>Any URL Smashed into a bit.ly URL will not be re-smashed, and will stay the same. Make sure that you specify a complete url, including the 'http(s)://' part. "Relative" URLs are not smashed.</p>
    <p>Use the "Validate Bit.ly Generic Access Token" button to make sure the Key value you entered is valid (but Save Changes first!).</p>
    <hr />
    <hr>
    <!--<p><strong>These options are available:</strong></p>-->
</div>
<?php
}

// ----------------------------------------------------------------------------
// display the copyright info part of the admin  page
// ----------------------------------------------------------------------------
function urlsmasher_info_bottom() {
	// print copyright with current year, never needs updating
	$xstartyear    = "2014";
	$xname         = "Rick Hellewell";
	$xcompanylink1 = ' <a href="http://CellarWeb.com" title="CellarWeb" >CellarWeb.com</a>';
	echo '<hr><div style="background-color:#9FE8FF;height:auto;padding: 5px 15px !important ;">
<p align="center">Copyright &copy; ' . $xstartyear . '  - ' . date("Y") . ' by ' . $xname . ' and ' . $xcompanylink1;
	echo ' , All Rights Reserved. Released under GPL2 license.</p></div><hr>';
	return;
}

// end  copyright ---------------------------------------------------------

// ----------------------------------------------------------------------------
// start of operational area that changes the comments box stuff
// start of op area (inside an else)
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// set the bitly_token global thing
$url_smasher_bitly_token = URL_SMASHER_OPTIONS['url_smasher_bitly_token'];
// ----------------------------------------------------------------------------
// set up the filters to process things based on the options settings
//  // preprocess comment after submitted to smash urls if enabled
if (isset(URL_SMASHER_OPTIONS['url_smasher_enable_comment'])) {
	add_filter('preprocess_comment', 'urlsmasher_comment', 99, 1);
}
// preprocess posts/pages after submitted to smash urls if enabled
if (isset(URL_SMASHER_OPTIONS['url_smasher_enable_content'])) {
	add_filter('wp_insert_post_data', 'urlsmasher_post', 99, 2);
}
// ----------------------------------------------------------------------------
// end of add_actions and add_filters for posts/pages with comments open
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// supporting functions for front end
// ----------------------------------------------------------------------------

// ----------------------------------------------------------------------------
//  to smash URLs in comments
// ----------------------------------------------------------------------------
function urlsmasher_comment($commentdata) { // smash urls in comments
	//unset( $commentdata['comment_author_url'] );
	$url_smasher_comment_text       = $commentdata['comment_content'];
	$url_smasher_smashed            = urlsmasher_find_the_urls($url_smasher_comment_text);
	$commentdata['comment_content'] = $url_smasher_smashed;
	return $commentdata;
}

// ----------------------------------------------------------------------------
//  to smash URLs in posts/pages
// ----------------------------------------------------------------------------
function urlsmasher_post($data, $postarr) { // smash urls in posts and pages
	$url_smasher_content_text = $data['post_content'];
	$data['post_content']     = urlsmasher_find_the_urls($url_smasher_content_text);
	return $data;
}

// ----------------------------------------------------------------------------
//  grab URLs out of text, then smash, returning the text to the caller
// ----------------------------------------------------------------------------

// smash the urls
function urlsmasher_find_the_urls($url_smasher_text) {
	global $commentdata;
//  global $url_smasher_options;
	//  global $url_smasher_bitly_token = URL_SMASHER_OPTIONS['url_smasher_bitly_token'];
	$url_smasher_bitly_token = URL_SMASHER_OPTIONS['url_smasher_bitly_token'];
	preg_match_all('#\bhttps?://[^\s()<>]+(?:\([\w\d]+\)|([^[:punct:]\s]|/))#', $url_smasher_text, $url_smasher_urls_array);
	$url_smasher_urls_array = array_unique($url_smasher_urls_array[0]); // get rid of duplicate URLs
// for each $url_smasher_urls_array, find the position in the text, then delete the url from that spot only
	foreach ($url_smasher_urls_array as $url_smasher_url_item) {
		if (!strpos($url_smasher_url_item, 'bit.ly')) {
			if (strpos($url_smasher_text, $url_smasher_url_item)) {
				$url_smasher_smashed_url = urlsmasher_smasher($url_smasher_url_item, $url_smasher_bitly_token);
				if (!is_null($url_smasher_smashed_url)) {
					$url_smasher_text = str_replace($url_smasher_url_item, $url_smasher_smashed_url, $url_smasher_text);
				}
			}
		}
	}
	return $url_smasher_text;
}

// ----------------------------------------------------------------------------
//  do the bit.ly stuff version 4 with the URL and the access token
// ----------------------------------------------------------------------------

function urlsmasher_smasher($url = "", $token = "") {
// based on the 'shortlink_for_url' function in https://gist.github.com/raamdev/5bc8be73ba16a725674854e6f33b91d7
if ((! $url) OR (! $token)) {return false;}	// empty, don't do anything; should never happen
/* my test values
$url = "https://www.cellarweb.com";
$token = "ae039ade0c06b87becdd84c102d0948371481876";
 */
	$rest_url = 'https://api-ssl.bitly.com/v4/shorten';
	$headers = array(
		'Content-Type' => 'application/json',
		'Authorization' => 'Bearer ' . $token
	);
	$req_args = array(
		'headers' => $headers,
		'body' => json_encode(array(
			'long_url' => $url
		))
	);

	// Allow API credentials and other options to be switched
	//   $req_args = (array) apply_filters( 'bitly_request_args', $req_args, $post_id );

	$response = wp_remote_post($rest_url, $req_args);

	if (!is_wp_error($response)) {
		$json = json_decode(wp_remote_retrieve_body($response));

		if (isset($json->link)) {
			return $json->link;
		}
	}

	return false;
}

// ----------------------------------------------------------------------------
//  shows the bit.ly test button on the settings page
// ----------------------------------------------------------------------------
function urlsmasher_show_test_button($url_smasher_access_token = "") {
	?>
<hr />
<h2>Click this button to test for valid Bit.ly Generic Access Token (Save Changes first!)</h2>
<p>Button can be clicked after you enter your Access Token and save it.</p>
<form method="post" name="testsettings" id="testsettings" action="" >
    <input type="submit" name="testsettings" id="testsettings" value="Validate Bit.ly Generic Access Token" style="background-color:yellow;"/>
</form>
<?php
if (isset($_POST['testsettings']) == 'Validate Bit.ly Generic Access Token') {
		urlsmasher_token_test();
		//wp_die();
	}
	return;}

// ----------------------------------------------------------------------------
// testing routine/output   ; urlsmasher_smasher now uses version 4 api
// ----------------------------------------------------------------------------
function urlsmasher_token_test() {
	//   global $url_smasher_options;
	if (!URL_SMASHER_OPTIONS['url_smasher_bitly_token']) {return false;}
	$url_to_smash = "http://www.cellarweb.com";
	$smashed_url  = urlsmasher_smasher($url_to_smash, URL_SMASHER_OPTIONS['url_smasher_bitly_token']);
	?>
<hr />
<div style="background-color:#9FE8FF;height:auto;padding:5px 15px;">
    <h2>Results of Bit.ly Generic Access Token Validation Test</h2>
    <hr />
    <p>Both links open in new tabs.</p>
    <p><strong>URL before Smashing:</strong> <?php echo preg_replace('/<a /', '<a target="_blank" ', make_clickable($url_to_smash)); ?></p>
    <p><strong>URL after Smashing :</strong> <?php echo preg_replace('/<a /', '<a target="_blank" ', make_clickable($smashed_url)); ?>&nbsp;&nbsp;(should be different from 'before' URL)</p>
    <?php
if (urlsmasher_gethost($smashed_url) == "bit.ly") {
		echo "<h3><strong>Huzzah! Valid Bitly Generic Access Token found!</strong> (Hopefully, it's yours!)</h3><p>We can't validate the Access Token as yours, only verify that it works.</p>";
	} else {echo "<h3><strong>Bummer! Not a valid Bitly Generic Access Token!</strong> Check your Bit.ly Generic Access Token <a href=\"https://app.bitly.com/settings/api/\" target=\"_blank\">here</a>.</h3><p>Remember that you need the Bit.ly version 4 token; see instructions above.</p>";
	}
	?>
</div>
<?php
return $results;
}

//------------------------------------------------------------------------------
// creates a guid for use by the GA post to send unique user id
function urlsmasher_guidv4() {
	if (function_exists('com_create_guid') === true) {
		return trim(com_create_guid(), '{}');
	}
	$data    = openssl_random_pseudo_bytes(16);
	$data[6] = chr(ord($data[6]) & 0x0f | 0x40); // set version to 0100
	$data[8] = chr(ord($data[8]) & 0x3f | 0x80); // set bits 6-7 to 10
	return vsprintf('%s%s-%s-%s-%s-%s%s%s', str_split(bin2hex($data), 4));
}

// ----------------------------------------------------------------------------
/// gets the host name from any url even if a partial host or without protocol
// ----------------------------------------------------------------------------
function urlsmasher_gethost($url) {
	$parseUrl = parse_url(trim($url));
	return trim($parseUrl['host']);
}

// ----------------------------------------------------------------------------
//  settings page sidebar content
// ----------------------------------------------------------------------------
function urlsmasher_sidebar() {
	?>
    <h3 align="center">But wait, there's more!</h3>
    <p><b>Need to stop Comment spam?</b> We've got a plugin that does that - install and immediately stop comment spam. Very effective. Does not require any other actions or configuration, and your comment form will look the same. It just works! See details here: <a href="https://wordpress.org/plugins/block-comment-spam-bots/" target="_blank" title="Block Comment Spam Bots">Block Comment Spam Bots</a> .</p>
    <p><b>We've got a <a href="https://wordpress.org/plugins/simple-gdpr/" target="_blank"><strong>Simple GDPR</strong></a> plugin that displays a GDPR banner for the user to acknowledge.</b> And it creates a generic Privacy page, and will put that Privacy Page link at the bottom of all pages.</p>
    <p><b>Interested in a plugin that will automatically add your Amazon Affiliate code to any Amazon links?  </b> Check out our nifty <a href="https://wordpress.org/plugins/amazolinkenator/" target="_blank" title="AmazoLinkenator - automatically adds affiliate links">AmazoLinkenator</a>!  It will probably increase your Amazon Affiliate revenue! Plus it has an optional automatic shortener.</p>
    <hr />
    <p><strong>To completely reduce and prevent comment spam</strong>, check out our <a href="https://wordpress.org/plugins/block-comment-spam-bots/" target="_blank" title="Block Comment Spam Bots">Block Comment Spam Bots</a> plugin (see above). Plus these plugins:</p>
    <p><a href="https://wordpress.org/plugins/formspammertrap-for-comments/" target="_blank"><strong>FormSpammerTrap for Comments</strong></a>: reduces spam without captchas, silly questions, or hidden fields - which don't always work. You can also customize the look of your comment form. Uses the same techniques as our Block Comment Spam Bots plugin. </p>
    <p><a href="https://wordpress.org/plugins/formspammertrap-for-contact-form-7/" target="_blank"><strong>FormSpammerTrap for Contact Form 7</strong></a>: reduces spam when you use Contact Form 7 forms. All you do is add a little shortcode to the contact form.</p>
<p><b>And if you want to block bots from your contact form</b>, head over to our <a href="https://www.FormSpammerTrap.com" target="_blank" title="FormSpammerTrap - blocks Contact form spammers">FormSpammerTrap</a> site. Works on WP and non-WP sites. Takes a bit of programming, but we can help with that. Full docs and implementation instructions. Just request the free code via the site's Contact form. </p>
    <hr />
    <p>For <strong>multisites</strong>, we've got:

    <ul>
        <li><strong><a href="https://wordpress.org/plugins/multisite-comment-display/" target="_blank">Multisite Comment Display</a></strong> to show all comments from all subsites.</li>
        <li><strong><a href="https://wordpress.org/plugins/multisite-post-reader/" target="_blank">Multisite Post Reader</a></strong> to show all posts from all subsites.</li>
        <li><strong><a href="https://wordpress.org/plugins/multisite-media-display/" target="_blank">Multisite Media Display</a></strong> shows all media from all subsites with a simple shortcode. You can click on an item to edit that item. </li>
    </ul>
    </p>
    <hr />
    <p><strong>They are all free and fully featured!</strong></p>
    <hr />
    <p>I don't drink coffee, but if you are inclined to donate any amount because you like my WordPress plugins, go right ahead! I'll grab a nice hot chocolate, and maybe a blueberry muffin. And a nice <a href="https://wordpress.org/plugins/amazolinkenator/#reviews" target="_blank" title="Plugin Reviews page">review on the plugin page</a> is always appreciated!</p>
    <div align="center">
        <?php urlsmasher_donate_button();?>
    </div>
    <p align='center'><b>Thanks!  <a href="https://www.RichardHellewell.com" target="_blank" title="Richard Hellewell author site">Richard Hellewell</a>, somewhere opposite Mutiny Bay WA.</b></p>
    <hr />
    <p><strong>Privacy Notice</strong>: This plugin does not store or use any personal information or cookies.</p>
<!--</div> -->
<?php
urlsmasher_cellarweb_logo();

	return;
}

// ----------------------------------------------------------------------------
// footer for settings page
// ----------------------------------------------------------------------------
function urlsmasher_footer() {
	?>
    <hr><h3 align='center' class='urlsmasher_larger_text'><b>Thanks for using CellarWeb.com's URL Smasher!  Tell your friends!</b></h3>
<hr><div style="background-color:#9FE8FF !important; padding:10px;color:black !important; ">
    <p align="center"><strong>Copyright &copy; 2016- <?php echo date('Y'); ?> by Rick Hellewell and <a href="http://CellarWeb.com" title="CellarWeb" >CellarWeb.com</a> , All Rights Reserved. Released under GPL2 license. <a href="http://cellarweb.com/contact-us/" target="_blank" title="Contact Us">Contact us page</a>.</strong></p>
</div>
<hr><br>
<?php
return;
}

// ----------------------------------------------------------------------------
// PayPal donation button for settings sidebar (as of 25 Jan 2022)
// ----------------------------------------------------------------------------
function urlsmasher_donate_button() {
	?>
<form action="https://www.paypal.com/donate" method="post" target="_top">
<input type="hidden" name="hosted_button_id" value="TT8CUV7DJ2SRN" />
<input type="image" src="https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif" border="0" name="submit" title="PayPal - The safer, easier way to pay online!" alt="Donate with PayPal button" />
<img alt="" border="0" src="https://www.paypal.com/en_US/i/scr/pixel.gif" width="1" height="1" />
</form>

<?php
return;
}

// ----------------------------------------------------------------------------
//  display the cellarweb logo
// ----------------------------------------------------------------------------
function urlsmasher_cellarweb_logo() {
	?>
 <p align="center"><a href="https://www.cellarweb.com" target="_blank" title="CellarWeb.com site"><img src="<?php echo plugin_dir_url(__FILE__); ?>assets/cellarweb-logo-2022.jpg"  width="90%" class="urlsmasher_shadow" ></a></p>
 <?php
return;
}

// --------------------------------------------------------------------------
// for debugging array contents
// --------------------------------------------------------------------------
function urlsmasher_print_array($the_array = array()) {
	echo "<div style='color:black;background-color:white;width=90%;display:block;'>";
	echo "<pre> ";
	print_r($the_array);
	echo "</pre> ";
	echo "</div>";
	return;
}

function urlsmasher_show_globals() {
	echo "<table border='1'><tr><td>GET</td><td>POST</td><td>FILES</td><td>REQUEST</td><td>SESSION</td></tr>";
	echo "<tr><td><pre>";
	print_r($_GET);
	echo "</pre></td>";
	echo "<td><pre>";
	print_r($_POST);
	echo "</pre></td>";
	echo "<td><pre>";
	print_r($_FILES);
	echo "</pre></td>";
	echo "<td><pre>";
	print_r($_REQUEST);
	echo "</pre></td>";
	echo "<td><pre>";
	print_r($_SESSION);
	echo "</pre></td></tr></table>";
	// for server variables
	// echo '<table border="1">';
	//foreach ($_SERVER as $k => $v){
	//echo "<tr><td>" . $k ."</td><td>" . $v . "</td></tr>";
	//}
	//
	//echo "</table>";
	return;
}

// -------------------------------------------------------------------------------

// ----------------------------------------------------------------------------
// all done!
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
